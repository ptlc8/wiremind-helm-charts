{{- if .Values.users.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "elasticsearch-cluster.fullname" . }}-create-users
  labels:
{{ include "elasticsearch-cluster.labels" . | indent 4 }}
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: elasticsearch-create-users
          image: curlimages/curl:7.79.1
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - -c
            - |
              echo 'Creating users'
              ES_AUTH="$ELASTICSEARCH_USERNAME:$ELASTICSEARCH_PASSWORD"
              ES_CA="$ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES"

              ES_URL='{{ .Values.users.elasticsearchHosts }}/_cluster/health'
              while true; do
                echo "Waiting for elasticsearch..."
                sleep 10
                HEALTH=$(curl -s -m 5 -u "$ES_AUTH" --cacert "$ES_CA" "$ES_URL")
                if echo "$HEALTH" | grep -qE '"status":"(green|yellow)"'; then
                  break
                fi
              done

              {{- range $name, $user := .Values.users.values }}
              echo 'Creating a new Elasticsearch user "{{ $name }}"'
              ES_URL='{{ $.Values.users.elasticsearchHosts }}/_security/user/{{ $name }}'
              USER='{
                "password": "{{ $user.password }}",
                "roles": {{ $user.roles | toJson }}
              }'
              curl -s -X POST -u "$ES_AUTH" --cacert "$ES_CA" -H "Content-Type: application/json" "$ES_URL" -d "$USER"
              echo

              {{- end }}
              echo 'Users created'
          env:
            - name: "ELASTICSEARCH_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.users.elasticsearchCredentialSecret }}
                  key: username
            - name: "ELASTICSEARCH_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.users.elasticsearchCredentialSecret }}
                  key: password
            - name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
              value: /certs/{{ .Values.users.elasticsearchCertificateAuthoritiesFile }}"
          volumeMounts:
            {{- if .Values.users.elasticsearchCertificateSecret }}
            - name: elasticsearch-certs
              mountPath: /certs
              readOnly: true
            {{- end }}
      volumes:
        {{- if .Values.users.elasticsearchCertificateSecret }}
        - name: elasticsearch-certs
          secret:
            secretName: {{ .Values.users.elasticsearchCertificateSecret }}
        {{- end }}
{{- end }}